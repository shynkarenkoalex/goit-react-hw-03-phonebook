{"version":3,"sources":["components/Layout/Layout.js","components/ContactItem/ContactItem.js","components/ContactList/ContactList.js","components/ContactForm/ContactForm.js","components/FilterContact/FilterContact.js","components/App.js","index.js"],"names":["Layout","children","className","ContactItem","nameItem","numberItem","onRemove","type","onClick","ContactList","contacts","onRemoveContact","map","id","name","number","key","INITIAL_STATE","ContactForm","state","handleChange","ev","target","value","setState","handleSubmit","preventDefault","trim","length","props","onAddContact","alert","reset","onSubmit","this","onChange","Component","FilterContact","valueFilter","onChangeFilter","App","filter","handleAddContact","contactItem","isExist","find","item","contact","uuid","prevState","handleChangeFilter","getVisibleContacts","toLowerCase","includes","handleRemoveContact","idConact","console","log","persistedContact","localStorage","getItem","JSON","parse","prevProps","snapshot","setItem","stringify","visibleContacts","ReactDOM","render","document","getElementById"],"mappings":"6YAUeA,G,MANA,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OAAkB,yBAAKC,UAAU,UAAUD,KCe3CE,G,MAfK,SAAC,GAAD,IAAEC,EAAF,EAAEA,SAAUC,EAAZ,EAAYA,WAAYC,EAAxB,EAAwBA,SAAxB,OAChB,wBAAIJ,UAAU,gBACV,uBAAGA,UAAU,gBAAgBE,EAA7B,KAAyCC,GACzC,6BAASH,UAAU,mBACf,4BAAQK,KAAK,SAASL,UAAU,iBAAiBM,QAASF,GAA1D,cCqBGG,G,MAxBK,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,gBAAb,OAClB,wBAAIT,UAAU,eACXQ,EAASE,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,OAAb,OACZ,kBAAC,EAAD,CACEC,IAAKH,EACLT,SAAUU,EACVT,WAAYU,EACZT,SAAU,kBAAMK,EAAgBE,Y,cCRlCI,G,MAAgB,CACpBH,KAAM,GACNC,OAAQ,KAGWG,E,4MAKnBC,M,eAAaF,G,EAEbG,aAAe,SAAAC,GAAO,IAAD,EACKA,EAAGC,OAAnBR,EADW,EACXA,KAAMS,EADK,EACLA,MACd,EAAKC,SAAL,eACGV,EAAOS,K,EAIZE,aAAe,SAAAJ,GACbA,EAAGK,iBACA,EAAKP,MAAML,KAAKa,OAAOC,OAAS,EACjC,EAAKC,MAAMC,aAAX,eAA6B,EAAKX,QAElCY,MAAM,0BAER,EAAKC,S,EAGPA,MAAQ,WACN,EAAKR,SAAL,eAAmBP,K,uDAInB,OACE,0BAAMf,UAAU,cAAc+B,SAAUC,KAAKT,cAC3C,2BAAOvB,UAAU,qBAAjB,OAEE,2BACEA,UAAU,oBACVK,KAAK,OACLO,KAAK,OACLS,MAAOW,KAAKf,MAAML,KAClBqB,SAAUD,KAAKd,gBAGnB,2BAAOlB,UAAU,qBAAjB,SAEE,2BACEA,UAAU,oBACVK,KAAK,OACLO,KAAK,SACLS,MAAOW,KAAKf,MAAMJ,OAClBoB,SAAUD,KAAKd,gBAGnB,4BAAQb,KAAK,SAASL,UAAU,sBAAhC,oB,GAnDiCkC,aCY1BC,G,MAjBO,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,eAAhB,OACpB,2BAAOrC,UAAU,gBAAjB,wBAEE,2BACEK,KAAK,OACLL,UAAU,eACVqB,MAAOe,EACPH,SAAU,SAAAd,GAAE,OAAIkB,EAAelB,EAAGC,OAAOC,aCJ1BiB,E,4MACnBrB,MAAQ,CACNT,SAAU,GACV+B,OAAQ,I,EAoBVC,iBAAmB,SAAAC,GACjB,IAAIC,EAAU,EAAKzB,MAAMT,SAASmC,MAChC,SAAAC,GAAI,OAAIA,EAAKhC,OAAS6B,EAAY7B,QAGpC,GAAI,EAAKK,MAAMT,SAASkB,OAAS,GAAKgB,EACpCb,MAAM,qBAAD,OAAsBY,EAAY7B,KAAlC,2BACA,CACL,IAAMiC,EAAU,CACdlC,GAAImC,MACJlC,KAAM6B,EAAY7B,KAClBC,OAAQ4B,EAAY5B,QAEtB,EAAKS,UAAS,SAAAyB,GAAS,MAAK,CAC1BvC,SAAS,GAAD,mBAAMuC,EAAUvC,UAAhB,CAA0BqC,U,EAKxCG,mBAAqB,SAAAT,GACnB,EAAKjB,SAAS,CAAEiB,Y,EAGlBU,mBAAqB,WAAO,IAAD,EACI,EAAKhC,MAA1BT,EADiB,EACjBA,SAAU+B,EADO,EACPA,OAClB,OAAO/B,EAAS+B,QAAO,SAAAM,GAAO,OAC5BA,EAAQjC,KAAKsC,cAAcC,SAASZ,EAAOW,mB,EAI/CE,oBAAsB,SAAAC,GACpB,EAAK/B,UAAS,SAAAyB,GACZ,MAAO,CACLvC,SAAUuC,EAAUvC,SAAS+B,QAAO,qBAAG5B,KAAgB0C,U,kEAjD3DC,QAAQC,IAAI,qBACZ,IAAMC,EAAmBC,aAAaC,QAAQ,YACrB,OAArBF,GACFxB,KAAKV,SAAS,CACZd,SAAUmD,KAAKC,MAAMJ,O,yCAKRK,EAAWd,EAAWe,GACvCR,QAAQC,IAAI,sBACRR,EAAUvC,WAAawB,KAAKf,MAAMT,UACpCiD,aAAaM,QAAQ,WAAYJ,KAAKK,UAAUhC,KAAKf,MAAMT,a,+BA0CrD,IAAD,EACsBwB,KAAKf,MAA1BT,EADD,EACCA,SAAU+B,EADX,EACWA,OACZ0B,EAAkBjC,KAAKiB,qBAC7B,OACE,kBAAC,EAAD,KACE,yCACA,kBAAC,EAAD,CAAarB,aAAcI,KAAKQ,mBAChC,wCACChC,EAASkB,OAAS,GACjB,kBAAC,EAAD,CACEU,YAAaG,EACbF,eAAgBL,KAAKgB,qBAGxBiB,EAAgBvC,OAAS,GACxB,kBAAC,EAAD,CACIlB,SAAUyD,EACVxD,gBAAiBuB,KAAKoB,2B,GA9EHlB,a,MCFjCgC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.9553baaa.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Layout.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Layout = ({ children }) => <div className=\"Layout\">{children}</div>;\r\n\r\nLayout.propTypes = {\r\n  children: PropTypes.node.isRequired\r\n};\r\n\r\nexport default Layout;\r\n","import React from 'react';\r\nimport './ContactItem.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ContactItem = ({nameItem, numberItem, onRemove}) => (    \r\n    <li className='Contact-item'>\r\n        <p className='Contact-text'>{nameItem}: {numberItem}</p>\r\n        <section className='Contact-actions'>\r\n            <button type='button' className='Contact-button' onClick={onRemove}>Remove</button>\r\n        </section>\r\n    </li>\r\n);\r\n\r\nContactItem.propTypes = {\r\n    nameItem: PropTypes.string.isRequired,\r\n    numberItem: PropTypes.string.isRequired,\r\n    onRemove: PropTypes.func.isRequired\r\n};\r\n\r\nexport default ContactItem;","import React from \"react\";\r\nimport ContactItem from \"../ContactItem\";\r\nimport \"./ContactList.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst ContactList = ({ contacts, onRemoveContact }) => (\r\n  <ul className=\"ContactList\">\r\n    {contacts.map(({ id, name, number }) => (\r\n      <ContactItem\r\n        key={id}\r\n        nameItem={name}\r\n        numberItem={number}\r\n        onRemove={() => onRemoveContact(id)}\r\n      />\r\n    ))}\r\n  </ul>\r\n);\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.exact({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired\r\n    })\r\n  ).isRequired,\r\n  onRemoveContact: PropTypes.func.isRequired\r\n};\r\n\r\nexport default ContactList;\r\n","import React, { Component } from \"react\";\r\nimport \"./ContactForm.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst INITIAL_STATE = {\r\n  name: \"\",\r\n  number: \"\"\r\n};\r\n\r\nexport default class ContactForm extends Component {\r\n  static propTypes = {\r\n    onAddContact: PropTypes.func.isRequired\r\n  };\r\n\r\n  state = { ...INITIAL_STATE };\r\n\r\n  handleChange = ev => {\r\n    const { name, value } = ev.target;\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  };\r\n\r\n  handleSubmit = ev => {\r\n    ev.preventDefault();\r\n    if(this.state.name.trim().length > 0) {\r\n      this.props.onAddContact({ ...this.state })\r\n    } else {\r\n      alert('Field Name is required')\r\n    }\r\n    this.reset();\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({ ...INITIAL_STATE });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form className=\"ContactForm\" onSubmit={this.handleSubmit}>\r\n        <label className=\"ContactForm-label\">\r\n          Name\r\n          <input\r\n            className=\"ContactForm-input\"\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={this.state.name}\r\n            onChange={this.handleChange}\r\n          />\r\n        </label>\r\n        <label className=\"ContactForm-label\">\r\n          Number\r\n          <input\r\n            className=\"ContactForm-input\"\r\n            type=\"text\"\r\n            name=\"number\"\r\n            value={this.state.number}\r\n            onChange={this.handleChange}\r\n          />\r\n        </label>\r\n        <button type=\"submit\" className=\"ContactForm-button\">\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"./FilterContact.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst FilterContact = ({ valueFilter, onChangeFilter }) => (\r\n  <label className=\"Filter-label\">\r\n    Find contacts by name\r\n    <input\r\n      type=\"text\"\r\n      className=\"Filter-input\"\r\n      value={valueFilter}\r\n      onChange={ev => onChangeFilter(ev.target.value)}\r\n    />\r\n  </label>\r\n);\r\n\r\nFilterContact.propTypes = {\r\n  valueFilter: PropTypes.string.isRequired,\r\n  onChangeFilter: PropTypes.func.isRequired\r\n};\r\n\r\nexport default FilterContact;\r\n","import React, { Component } from \"react\";\r\nimport uuid from \"uuid\";\r\nimport Layout from \"./Layout\";\r\nimport ContactList from \"./ContactList\";\r\nimport ContactForm from \"./ContactForm\";\r\nimport Filter from \"./FilterContact\";\r\n\r\nexport default class App extends Component {\r\n  state = {\r\n    contacts: [],\r\n    filter: \"\"\r\n  };\r\n\r\n  componentDidMount() {\r\n    console.log('componentDidMount');\r\n    const persistedContact = localStorage.getItem('contacts');\r\n    if (persistedContact !== null) {\r\n      this.setState({\r\n        contacts: JSON.parse(persistedContact)\r\n      })\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    console.log('componentDidUpdate');\r\n    if (prevState.contacts !== this.state.contacts) {\r\n      localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\r\n    }\r\n  }\r\n\r\n  handleAddContact = contactItem => {\r\n    let isExist = this.state.contacts.find(\r\n      item => item.name === contactItem.name\r\n    );\r\n\r\n    if (this.state.contacts.length > 0 && isExist) {\r\n      alert(`contact with name ${contactItem.name} is allready exist`);\r\n    } else {\r\n      const contact = {\r\n        id: uuid(),\r\n        name: contactItem.name,\r\n        number: contactItem.number\r\n      };\r\n      this.setState(prevState => ({\r\n        contacts: [...prevState.contacts, contact]\r\n      }));\r\n    }\r\n  };\r\n\r\n  handleChangeFilter = filter => {\r\n    this.setState({ filter });\r\n  };\r\n\r\n  getVisibleContacts = () => {\r\n    const { contacts, filter } = this.state;\r\n    return contacts.filter(contact =>\r\n      contact.name.toLowerCase().includes(filter.toLowerCase())\r\n    );\r\n  };\r\n\r\n  handleRemoveContact = idConact => {\r\n    this.setState(prevState => {\r\n      return {\r\n        contacts: prevState.contacts.filter(({ id }) => id !== idConact)\r\n      };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { contacts, filter } = this.state;\r\n    const visibleContacts = this.getVisibleContacts();\r\n    return (\r\n      <Layout>\r\n        <h1>Phonebook</h1>\r\n        <ContactForm onAddContact={this.handleAddContact} />\r\n        <h2>Contacts</h2>\r\n        {contacts.length > 1 && (\r\n          <Filter\r\n            valueFilter={filter}\r\n            onChangeFilter={this.handleChangeFilter}\r\n          />\r\n        )}\r\n        {visibleContacts.length > 0 && (\r\n          <ContactList\r\n              contacts={visibleContacts}\r\n              onRemoveContact={this.handleRemoveContact}\r\n          />\r\n        )}\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './base.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}